SC03

Assignment No. 12

//Represent a given graph using adjacency matrix/list to perform DFS and using 
//adjacency list to perform BFS. Use the map of the area around the college as the graph. 
//Identify the prominent landmarks as nodes and perform DFS and BFS on that.

#include <iostream>
#include <stack>
#include <queue>
using namespace std;
class graph
{
	struct node
	{
		int data;
		node *next;
	}*head[10];					//array of head ptrs
	int v;
	int e;
	public:
		graph()
		{
			for(int i=0;i<10;i++)
			{
				head[i]=NULL;
			}
			e=0;
			v=0;
		}
		void create();
		void display();
		void bfs();
		void dfs();
};

void graph::create()
{
	int v1, v2;
	int ans;
	node *temp, *temp2;
	cout<<"Enter the number of vertices: "<<endl;
	cin>>v;
	do
	{
		cout<<"Enter values of v1 and v2: "<<endl;			//2 vertices for forming an edge
		cin>>v1>>v2;
		temp=new node;
		temp->data=v1;
		temp->next=NULL;
		temp2=new node;
		temp2->data=v2;
		temp2->next=NULL;
		//as graph is undirected, each edge is considered twice
		//connection v2 to v1
		if(head[v2]==NULL)					
		{												//if head is null then insert node at head position
			head[v2]=temp;
		}
		else											//add node at the beginning
		{
			temp->next=head[v2];
			head[v2]=temp;
		}
		//connection v1 to v2
		if(head[v1]==NULL)						
		{												//if head is null then insert node at head position
			head[v1]=temp2;
		}
		else											//add node at the beginning
		{
			temp2->next=head[v1];
			head[v1]=temp2;
		}
		e++;
		cout<<"Do you want to add a node? 1 for yes ";
		cin>>ans;
	}
	while(ans==1);
}

void graph::display()
{
	node *temp;
	for(int i=0;i<v;i++)
	{
		cout<<"\nV("<<i<<")---> ";
		temp=head[i];
		while(temp!=NULL)
		{
			cout<<temp->data<<" ";
			temp=temp->next;
		}
	}
	cout<<"\nTotal Edges are: "<<" "<<e;	
}

void graph::dfs()
{
	int visit[v];						//array of visited vertices initially 0
	int sv, num;						//declare for starting vertex and vertex after popping
	stack<int>s;
	node *temp;
	for(int i=0;i<v;i++)
	{
		visit[i]=0;
	}
	cout<<"Enter starting vertex: "<<endl;
	cin>>sv;
	s.push(sv);
	while(s.top()!=-1)					//stack not empty
	{
		num=s.top();
		s.pop();
		if(visit[num]==0)
		{
			cout<<num<<" ";
			visit[num]=1;
		}
		temp=head[num];					//stores head node of popped vertex
		while(temp!=NULL)				//find the adjacent nodes of num in the linked list
		{
			if(visit[temp->data]==0)	//adjacent node of num but not visited
			{
				s.push(temp->data);
			}
			temp=temp->next;			//move to next node and repeat the steps
		}
	}
}

void graph::bfs()
{
	int visit[v];						//array of visited vertices initially 0
	int sv, num;						//declare for starting vertex and vertex after popping
	queue<int>q;
	node *temp;
	for(int i=0;i<v;i++)
	{
		visit[i]=0;
	}
	cout<<"Enter starting vertex: "<<endl;
	cin>>sv;
	q.push(sv);
	while(q.front()!=-1)					//queue not empty
	{
		num=q.front();
		q.pop();
		if(visit[num]==0)
		{
			cout<<num<<" ";
			visit[num]=1;
		}
		temp=head[num];
		while(temp!=NULL)
		{
			if(visit[temp->data]==0)
			{
				q.push(temp->data);
			}
			temp=temp->next;
		}
	}
}

int main()
{
	graph obj;
	int ch;
	int ans;
	do
	{
		cout<<"\n1.create\n2.dfs\n3.bfs\n0.exit\nEnter your choice: "<<endl;
		cin>>ch;
		switch(ch)
		{
			case 1: obj.create();
					obj.display();
					break;
			case 2: obj.dfs();
					break;	
			case 3: obj.bfs();
					break;			
		}
		cout<<"\nDo you want to continue?";
		cin>>ans;
	}while(ans==1);
	return 0;
}
